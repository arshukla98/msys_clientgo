/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/arshukla98/msys_clientgo/pkg/apis/monitoring/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PromCRLister helps list PromCRs.
// All objects returned here must be treated as read-only.
type PromCRLister interface {
	// List lists all PromCRs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.PromCR, err error)
	// PromCRs returns an object that can list and get PromCRs.
	PromCRs(namespace string) PromCRNamespaceLister
	PromCRListerExpansion
}

// promCRLister implements the PromCRLister interface.
type promCRLister struct {
	indexer cache.Indexer
}

// NewPromCRLister returns a new PromCRLister.
func NewPromCRLister(indexer cache.Indexer) PromCRLister {
	return &promCRLister{indexer: indexer}
}

// List lists all PromCRs in the indexer.
func (s *promCRLister) List(selector labels.Selector) (ret []*v1.PromCR, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PromCR))
	})
	return ret, err
}

// PromCRs returns an object that can list and get PromCRs.
func (s *promCRLister) PromCRs(namespace string) PromCRNamespaceLister {
	return promCRNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PromCRNamespaceLister helps list and get PromCRs.
// All objects returned here must be treated as read-only.
type PromCRNamespaceLister interface {
	// List lists all PromCRs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.PromCR, err error)
	// Get retrieves the PromCR from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.PromCR, error)
	PromCRNamespaceListerExpansion
}

// promCRNamespaceLister implements the PromCRNamespaceLister
// interface.
type promCRNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PromCRs in the indexer for a given namespace.
func (s promCRNamespaceLister) List(selector labels.Selector) (ret []*v1.PromCR, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PromCR))
	})
	return ret, err
}

// Get retrieves the PromCR from the indexer for a given namespace and name.
func (s promCRNamespaceLister) Get(name string) (*v1.PromCR, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("promcr"), name)
	}
	return obj.(*v1.PromCR), nil
}
